_page.search.nextData = new HtmlHandler({
   "selector": "#__NEXT_DATA__",
   "data": {
      "initialStates": ["siteOptions"],
      "curatorData": ["viewConfig", "meta", "etcInfo", "pageDefinition", "pageValue"],
      "homeData": ["headTags", "viewConfig", "pageViewLog", "etcInfo", "urlInfo", "meta"],
      "regions": ["floating_menu", "page_header", "filter"],
   },
   val() {
      if (!this.exists()) return null;

      const node = this.node();
      const value = JSON.parse(node.innerHTML.trim());
      this.log(">> [ORIGIN]", value);
      
      const initialStates = value?.props?.pageProps?.initialStates;
      if (!initialStates) return value;
      this.recursiveDelete(initialStates, this.data.initialStates);

      const curatorData = initialStates?.curatorData;
      if (!curatorData) return value;
      this.recursiveDelete(curatorData, this.data.curatorData);

      const homeData = curatorData?.homeData;
      if (!homeData) return value;
      this.recursiveDelete(homeData, this.data.homeData);

      const regions = homeData?.regions;
      if (!regions) return value;
      for (let i = regions.length - 1; i >= 0; i--)
         if (this.data.regions.indexOf(regions[i].name) > -1) regions.splice(i, 1);

      return value;
   },
   recursiveDelete: (obj, fields) => {
      if (typeof obj === 'object' && obj !== null) {
         fields.forEach(field => {
            if (obj.hasOwnProperty(field)) delete obj[field];
         });
         
      }
   }
});
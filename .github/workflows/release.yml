name: Build and Release

on:
  push:
    tags:
      - 'v*' # v로 시작하는 태그가 푸시되면 실행 (예: v1.0.0, v2.1.3)

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install native bindings (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm install @rollup/rollup-win32-x64-msvc --no-save
          npm install lightningcss-win32-x64-msvc --no-save

      - name: Install native bindings (macOS ARM64)
        if: matrix.os == 'macos-latest'
        run: |
          npm install @rollup/rollup-darwin-arm64 --no-save
          npm install lightningcss-darwin-arm64 --no-save

      - name: Build application
        run: bun run build

      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: bun run build && bunx electron-builder --win --x64 --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build macOS executable
        if: matrix.os == 'macos-latest'
        run: bun run build && bunx electron-builder --mac --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            dist/*.exe
            dist/*.exe.blockmap

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            dist/*.dmg
            dist/*.dmg.blockmap

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: dist-windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: dist-macos

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          includeSource: false
          files: |
            dist-windows/*.exe
            dist-macos/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

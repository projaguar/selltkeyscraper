name: Build and Release

on:
  push:
    tags:
      - 'v*' # v로 시작하는 태그가 푸시되면 실행 (예: v1.0.0, v2.1.3)

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm install
          npm install --force @rollup/rollup-win32-x64-msvc lightningcss-win32-x64-msvc @tailwindcss/oxide-win32-x64-msvc

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: bun install

      - name: Typecheck (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npx tsc --noEmit -p tsconfig.node.json --composite false
          npx tsc --noEmit -p tsconfig.web.json --composite false

      - name: Typecheck (macOS)
        if: matrix.os == 'macos-latest'
        run: bun run typecheck

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: npx electron-vite build

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: bunx electron-vite build

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: npx electron-builder --win --x64 --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # 코드 서명 완전 비활성화
          export CSC_IDENTITY_AUTO_DISCOVERY=false
          export CSC_LINK=""
          export CSC_KEY_PASSWORD=""
          export APPLE_ID=""
          export APPLE_PASSWORD=""
          export APPLE_TEAM_ID=""

          bunx electron-builder --mac --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            dist/*.exe
            dist/*.exe.blockmap

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            dist/*.dmg
            dist/*.dmg.blockmap

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: dist-windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: dist-macos

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            자동 생성된 릴리즈입니다.

            ## 다운로드
            - **Windows**: selltkeyscraper-${{ steps.get_version.outputs.VERSION }}-setup.exe
            - **macOS**: selltkeyscraper-${{ steps.get_version.outputs.VERSION }}.dmg
          draft: false
          prerelease: false
          generate_release_notes: false
          files: |
            dist-windows/*.exe
            dist-macos/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Source Code Assets
        uses: mknejp/delete-release-assets@v1
        with:
          pattern: 'Source code (zip)|Source code (tar.gz)'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
